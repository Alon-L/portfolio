[
  {
    "title": "Frontend",
    "path": "/frontend",
    "dimensions": {
      "rows": 2,
      "columns": 4
    },
    "background": "frontend.jpg",
    "placeholder": "frontend-placeholder.jpg",
    "projects": [
      {
        "title": "Plicked - SMM",
        "desc": "Plicked is a social media marketing service. I was requested to create a static website and a panel design for them. The site includes multiple pages, navigations, and cleanly designed sections.",
        "toolsUsed": "The website is built entirely on ReactJS. I also used TypeScript, Webpack, Redux, and SCSS, along with Bootstrap, for stylizing. The site also required a panel design, for that I used static HTML, CSS, and JavaScript for special effects. The panel was quite limiting, but I am happy with the final results.",
        "background": "plicked-smm.png",
        "colors": {
          "primary": "#35A591",
          "secondary": "#5AD3BD"
        },
        "buttons": {
          "visit": "https://plicked.alonlivne.dev"
        }
      },
	  {
        "title": "Storm Social",
        "desc": "Storm Social offers social media growth and constantly hosts giveaways for social media related rewards. The static website, integrates with Shopify as a backend to securely handle store purchases. It includes multiple product, giveaway, general and more miscellaneous pages.",
        "toolsUsed": "I used ReactJS along with TypeScript, Redux and SCSS for the website. I have also used TailwindCSS for stylizing. The website is integrated with Shopify as a backend service.",
        "background": "storm-social.png",
        "colors": {
          "primary": "#02a2e0",
          "secondary": "#38c3fa"
        },
        "buttons": {
          "visit": "https://storm-social.alonlivne.dev",
		  "source": "https://github.com/Alon-L/storm-social"
        }
      },
      {
        "title": "WumpCraft Website",
        "desc": "WumpCraft is a Discord Bot explicitly created for Discord's Hack Week 2019 competition. This website is a simple static site that I developed in under 2 hours. The website lists the available bot commands and displays my social media links.",
        "toolsUsed": "I used ReactJS, Webpack, and SCSS along with Bootstrap for stylizing.",
        "background": "wumpcraft-website.png",
        "colors": {
          "primary": "#869DEE",
          "secondary": "#AABFF2"
        },
        "buttons": {
          "visit": "https://wumpcraft.xyz/",
          "source": "https://github.com/DayColor/wumpcraft-website"
        }
      },
      {
        "title": "Plicked - Instagram Growth",
        "desc": "Plicked - Instagram Growth is the second commission made for Plicked. It is based on the original website, though, with a few tweaks and additional pages.",
        "toolsUsed": "I once again used ReactJS entirely, combined with TypeScript, Webpack, SCSS along Bootstrap for stylizing, and some more additional SCSS libraries.",
        "background": "plicked-instagram-growth.png",
        "colors": {
          "primary": "#5c5adb",
          "secondary": "#4745c4"
        },
        "buttons": {
          "visit": "https://plicked-new.alonlivne.dev"
        }
      }
    ]
  },
  {
    "title": "Backend",
    "path": "/backend",
    "dimensions": {
      "rows": 3,
      "columns": 2
    },
    "background": "backend.jpg",
    "placeholder": "backend-placeholder.jpg",
    "projects": [
      {
        "title": "Proxies Creator",
        "desc": "Proxies Creator is an ElectronJS application that automatically generates proxies using multiple eCommerce APIs, such as Google Cloud, DigitalOcean, Scaleway, etc.\nClients enter their API key, which later gets used to generate proxies. It then verifies whether the proxies are valid for use, and sends them back to the client.\nAfter using the proxies, the client can choose to terminate them via the application interface.",
        "toolsUsed": "The application was made using ElectronJS, HTML, and CSS.",
        "background": "proxies-creator.png",
        "colors": {
          "primary": "#c75050",
          "secondary": "#d96262"
        }
      },
      {
        "title": "Proxy Tester",
        "desc": "Proxy Tester is another ElectronJS application that validates proxies from an entered list of proxy IPs. The application returns the valid proxies to the client for their usage. The app also has a server-side backend that verifies the proxies using an external server for a preciser validation.",
        "toolsUsed": "The electron app uses ElectronJS, of course, along with ReactJS and Flow.\nThe server-side backend uses fastify - an ExpressJS alternative.",
        "background": "proxy-tester.png",
        "colors": {
          "primary": "#73d4eb",
          "secondary": "#62c3d9"
        }
      },
      {
        "title": "Twitter Monitor",
        "desc": "Twitter Monitor is an application that notifies the client whenever a tweet gets posted, according to their settings. The app listens to a server-side backend which scrapes Twitter's HTML according to each client's settings.\nThe clients can choose the twitter profiles for which they will be notified, and a list of words that must (or must not) appear in the new tweet.",
        "toolsUsed": "The application is built on ElectronJS along with ReactJS, Redux, and Socket.IO.\nThe server-side backend uses MongoDB to store user data; Cheerio to scrape the HTML, and gather the required data; Proxy list APIs in order to generate the proxies necessary to scrape the page constantly. I also used the library fastify, which is an ExpressJS alternative.",
        "background": "twitter-monitor.png",
        "colors": {
          "primary": "#ba30a8",
          "secondary": "#a62695"
        }
      }
    ]
  },
  {
    "title": "Problem Solving",
    "path": "/solving",
    "dimensions": {
      "rows": 2,
      "columns": 4
    },
    "background": "solving.jpg",
    "placeholder": "solving-placeholder.jpg",
    "projects": [
      {
        "title": "JSON Documentation Generator",
        "desc": "JSON Documentation Generator is a NodeJS CLI package used to generate markdown documentation files for JSON configuration files.\nThe package fetches all the properties of the file and then cleanly formats them, using markdowns, into a .md file.",
        "toolsUsed": "The package is dependent-free - it does not use any NodeJS packages to function. It uses NodeJS's native way of creating CLI packages.",
        "background": "json-documentation-generator.png",
        "colors": {
          "primary": "#db2a2a",
          "secondary": "#bf1515"
        },
        "buttons": {
          "source": "https://github.com/DayColor/json-documentation-file-generator"
        }
      },
      {
        "title": "Currency Converter",
        "desc": "Currency Converter is a browser extension that converts prices shown on marketing websites into a different currency, that can be chosen from a list of available currencies.",
        "toolsUsed": "I used Firefox's extensions API as well as another API to receive the value in real-time of every currency.",
        "background": "currency-converter-extension.png",
        "colors": {
          "primary": "#22e3a3",
          "secondary": "#15bf87"
        },
        "buttons": {
          "source": "https://github.com/DayColor/currency-converter-extension"
        }
      },
      {
        "title": "TypeRacer Practice Extension",
        "desc": "TypeRacer Practice Extension is another browser extension that was requested by the TypeRacer community. The extension will display the number of saves the user has for a quote once they finish it. It uses built-in browser storage to retrieve the data.",
        "toolsUsed": "I initially built the extension on Firefox's extensions API, but then I  also decided to add support for Chrome.",
        "background": "typeracer-practice-extension.png",
        "colors": {
          "primary": "#6538eb",
          "secondary": "#562adb"
        },
        "buttons": {
          "source": "https://github.com/DayColor/typeracer-practice-extension"
        }
      },
      {
        "title": "CSS Variables Remover",
        "desc": "CSS Variable Remover is a script that was initially developed to help me support older browsers that do not support variables in CSS code.\nThe script automatically replaces all variables in the code with their value.",
        "toolsUsed": "The script does not use any additional tools besides NodeJS.",
        "background": "css-variables-remover.png",
        "colors": {
          "primary": "#c42346",
          "secondary": "#db3257"
        },
        "buttons": {
          "source": "https://github.com/DayColor/css-variables-remover"
        }
      }
    ]
  },
  {
    "title": "Other",
    "path": "/other",
    "dimensions": {
      "rows": 3,
      "columns": 2
    },
    "background": "other.jpg",
    "placeholder": "other-placeholder.jpg",
    "projects": [
      {
        "title": "ASCII Art Video",
        "desc": "ASCII Art Video is a side-project of mine that converts a video in real-time into ASCII letters and displays them. I encountered a few minor problems throughout the project, though the performant issue was the hardest to overcome.\nThe code runs on the CPU, which, unlike the GPU, is not fast enough for mathematic operations. For that sole reason, I had to optimize my code to display the video on at least 30 frames per second. I ultimately overcame this issue, and I am pleased with the final results.",
        "toolsUsed": "The project uses TypeScript along with Webpack for compilation. It also strongly depends on the Canvas API.",
        "background": "ascii-art-video.png",
        "colors": {
          "primary": "#54c3eb",
          "secondary": "#42a6c9"
        },
        "buttons": {
          "source": "https://github.com/DayColor/ascii-art-video"
        }
      },
      {
        "title": "SMS Notifier Bot",
        "desc": "SMS Notifier Bot notifies you on Discord when you receive SMS messages on your mobile device. The project is split into two parts: an android application and a Discord Bot.\nThe android application listens for any incoming notifications on the device and sends them to the Discord Bot, which then notifies the user.",
        "toolsUsed": "The android application was built using Kotlin, and the Discord Bot uses the Discord.JS library.",
        "background": "sms-discord-bot.png",
        "colors": {
          "primary": "#7752de",
          "secondary": "#5a3ab5"
        },
        "buttons": {
          "source": "https://github.com/DayColor/SMS-Discord-Bot"
        }
      },
      {
        "title": "ASCII Art Images",
        "desc": "ASCII Art Images receives an image and turns it into ASCII letters. Although similar to ASCII Art Videos, this project prefers performance over time, and it looks into more depth while generating the letters.",
        "toolsUsed": "I used TypeScript along with Webpack for compilation. The project also strongly depends on the Canvas API.",
        "background": "ascii-art-images.png",
        "colors": {
          "primary": "#52de8c",
          "secondary": "#42c97a"
        },
        "buttons": {
          "source": "https://github.com/DayColor/ascii-art"
        }
      }
    ]
  },
  {
    "title": "Discord Bots",
    "path": "/bots",
    "dimensions": {
      "rows": 2,
      "columns": 4
    },
    "background": "discord-bots.png",
    "placeholder": "discord-bots-placeholder.png",
    "projects": [
      {
        "title": "WumpCraft",
        "desc": "WumpCraft is my winning entry for Discord's Hack Week 2019 competition. The competition required all entries to be created in under five days. This bot visualizes a recreation of the video game Minecraft using Discord's emojis and reactions. Users can move around, complete achievements, and experience Minecraft-like physics and features.\nThe bot won 2nd place in the entertainment category.",
        "toolsUsed": "The bot uses Discord.JS without any additional libraries, meaning that all physics and events were created by myself.",
        "background": "wumpcraft-bot.png",
        "colors": {
          "primary": "#869DEE",
          "secondary": "#AABFF2"
        },
        "buttons": {
          "visit": "https://wumpcraft.xyz",
          "source": "https://github.com/DayColor/wumpcraft"
        },
        "award": true
      },
      {
        "title": "TypeRacer Bot",
        "desc": "TypeRacer Bot simulates TypeRacer on Discord. Users can race solo, duel against another user, or even create groups and race together. The bot randomly selects a text for the participants to race on out of a database of over 5,000 texts. It also includes an advanced anti-cheat system that prevents participants from getting an inhuman score.\nThe bot is partnered with TypeRacer themselves, and it is currently playable on their Discord server.",
        "toolsUsed": "I used Discord.JS to write the bot, along with a few algorithms I wrote for comparing the users' replies to the original text to find their accuracy.",
        "background": "typeracer-bot.png",
        "colors": {
          "primary": "#2630bf",
          "secondary": "#3742db"
        }
      },
      {
        "title": "Calvin Bot",
        "desc": "Calvin is another Discord Bot requested by a client. The bot provides the ability to buy virtual items through Discord using PayPal's API. The bot will create a private ticket channel for the user and generate a PayPal invoice according to their arguments.",
        "toolsUsed": "I used Discord.JS for the bot. It also uses the PayPal Rest SDK library to communicate with PayPal; and SQLite - a local SQL database to save a minimal amount of data.",
        "background": "calvin.png",
        "colors": {
          "primary": "#37db8e",
          "secondary": "#2bbd78"
        }
      },
      {
        "title": "CV Bot",
        "desc": "CV is a Discord Bot requested by a client that plays music using the Lavalink API. The bot receives a song title or a YouTube link as an argument, and then plays that song in a voice channel. It also has the ability to display the lyrics of the currently playing song into a channel on command.",
        "toolsUsed": "This bot uses Discord.JS to operate. It also uses the Lavalink API to find the requested song; and the KSoft API, which is used to find the lyrics for a song.",
        "background": "cv-bot.png",
        "colors": {
          "primary": "#3bb4db",
          "secondary": "#2b99bd"
        }
      }
    ]
  }
]
